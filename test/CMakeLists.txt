##Copyright (C) 2022, Advanced Micro Devices, Inc. All rights reserved.##

add_definitions(-DBLAS="AOCL")

add_executable(TestAminv test_aminv.c)
target_link_libraries(TestAminv PRIVATE "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestAminv "${OMP_LIB}")
endif()
target_link_libraries(TestAminv optimized "${LIB_NAME}.lib")

add_executable(TestAxpyv test_axpyv.c)
target_link_libraries(TestAxpyv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestAxpyv "${OMP_LIB}")
endif()
target_link_libraries(TestAxpyv optimized "${LIB_NAME}.lib")

add_executable(TestAxpbyv test_axpbyv.c)
target_link_libraries(TestAxpbyv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestAxpbyv "${OMP_LIB}")
endif()
target_link_libraries(TestAxpbyv optimized "${LIB_NAME}.lib")

add_executable(TestCopyv test_copyv.c)
target_link_libraries(TestCopyv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestCopyv "${OMP_LIB}")
endif()
target_link_libraries(TestCopyv optimized "${LIB_NAME}.lib")

add_executable(TestCabs1 test_cabs1.c)
target_link_libraries(TestCabs1 debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestCabs1 "${OMP_LIB}")
endif()
target_link_libraries(TestCabs1 optimized "${LIB_NAME}.lib")

add_executable(TestDotv test_dotv.c)
target_link_libraries(TestDotv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestDotv "${OMP_LIB}")
endif()
target_link_libraries(TestDotv optimized "${LIB_NAME}.lib")

add_executable(TestGemm test_gemm.c)
target_link_libraries(TestGemm debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestGemm "${OMP_LIB}")
endif()
target_link_libraries(TestGemm optimized "${LIB_NAME}.lib")

add_executable(TestGemmBatch test_gemm_batch.c)
target_link_libraries(TestGemmBatch debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestGemmBatch "${OMP_LIB}")
endif()
target_link_libraries(TestGemmBatch optimized "${LIB_NAME}.lib")

add_executable(TestGemm3m test_gemm3m.c)
target_link_libraries(TestGemm3m debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestGemm3m "${OMP_LIB}")
endif()
target_link_libraries(TestGemm3m optimized "${LIB_NAME}.lib")

add_executable(TestGemmt test_gemmt.c)
target_link_libraries(TestGemmt debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestGemmt "${OMP_LIB}")
endif()
target_link_libraries(TestGemmt optimized "${LIB_NAME}.lib")

add_executable(TestGemv test_gemv.c)
target_link_libraries(TestGemv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestGemv "${OMP_LIB}")
endif()
target_link_libraries(TestGemv optimized "${LIB_NAME}.lib")

add_executable(TestGer test_ger.c)
target_link_libraries(TestGer debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestGer "${OMP_LIB}")
endif()
target_link_libraries(TestGer optimized "${LIB_NAME}.lib")

add_executable(TestHemm test_hemm.c)
target_link_libraries(TestHemm debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestHemm "${OMP_LIB}")
endif()
target_link_libraries(TestHemm optimized "${LIB_NAME}.lib")

add_executable(TestHemv test_hemv.c)
target_link_libraries(TestHemv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestHemv "${OMP_LIB}")
endif()
target_link_libraries(TestHemv optimized "${LIB_NAME}.lib")

add_executable(TestHer test_her.c)
target_link_libraries(TestHer debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestHer "${OMP_LIB}")
endif()
target_link_libraries(TestHer optimized "${LIB_NAME}.lib")

add_executable(TestHer2 test_her2.c)
target_link_libraries(TestHer2 debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestHer2 "${OMP_LIB}")
endif()
target_link_libraries(TestHer2 optimized "${LIB_NAME}.lib")

add_executable(TestHer2k test_her2k.c)
target_link_libraries(TestHer2k debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestHer2k "${OMP_LIB}")
endif()
target_link_libraries(TestHer2k optimized "${LIB_NAME}.lib")

add_executable(TestHerk test_herk.c)
target_link_libraries(TestHerk debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestHerk "${OMP_LIB}")
endif()
target_link_libraries(TestHerk optimized "${LIB_NAME}.lib")

add_executable(TestScalv test_scalv.c)
target_link_libraries(TestScalv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestScalv "${OMP_LIB}")
endif()
target_link_libraries(TestScalv optimized "${LIB_NAME}.lib")

add_executable(TestSwapv test_swapv.c)
target_link_libraries(TestSwapv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestSwapv "${OMP_LIB}")
endif()
target_link_libraries(TestSwapv optimized "${LIB_NAME}.lib")

add_executable(TestTrmm test_trmm.c)
target_link_libraries(TestTrmm debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestTrmm "${OMP_LIB}")
endif()
target_link_libraries(TestTrmm optimized "${LIB_NAME}.lib")

add_executable(TestTrmv test_trmv.c)
target_link_libraries(TestTrmv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestTrmv "${OMP_LIB}")
endif()
target_link_libraries(TestTrmv optimized "${LIB_NAME}.lib")

add_executable(TestTrsm test_trsm.c)
target_link_libraries(TestTrsm debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestTrsm "${OMP_LIB}")
endif()
target_link_libraries(TestTrsm optimized "${LIB_NAME}.lib")

add_executable(TestTrsv test_trsv.c)
target_link_libraries(TestTrsv debug "${LIB_NAME}.lib")
if(ENABLE_OPENMP AND BUILD_SHARED_LIBS)
    target_link_libraries(TestTrsv "${OMP_LIB}")
endif()
target_link_libraries(TestTrsv optimized "${LIB_NAME}.lib")


